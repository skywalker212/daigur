{"version":3,"sources":["Components/Button/button.jsx","Components/sign-in/sign-in.jsx","Components/header/header.jsx","Components/App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","onClick","className","concat","text","SignIn","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getParent","document","querySelector","handleOpenModal","setState","showModal","handleCloseModal","state","Components_Button_button","lib_default","isOpen","contentLabel","onRequestClose","overlayClassName","React","Component","Header","sign_in_sign_in","App","header_header","Boolean","window","location","hostname","match","ReactDOM","render","src_Components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2VAOeA,eAJF,SAACC,GAAD,OACTC,EAAAC,EAAAC,cAAA,UAAQC,QAASJ,EAAMI,QAASC,UAAS,GAAAC,OAAKN,EAAMK,UAAX,aAAiCL,EAAMO,QCiCrEC,cA/BX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAmBJI,UAAY,WACR,OAAOC,SAASC,cAAc,cArBrBT,EAuBbU,gBAAkB,WACdV,EAAKW,SAAS,CAACC,WAAU,KAxBhBZ,EA0Bba,iBAAmB,WACfb,EAAKW,SAAS,CAACC,WAAU,KAzBzBZ,EAAKc,MAAM,CACPF,WAAU,GAHLZ,wEAOT,OACIR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAACqB,EAAD,CAAQnB,UAAU,UAAUD,QAASQ,KAAKO,gBAAiBZ,KAAK,YAChEN,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CAAYwB,OAAQd,KAAKW,MAAMF,UACnBM,aAAa,UACbC,eAAgBhB,KAAKU,iBACrBjB,UAAU,eACVwB,iBAAiB,kBACzB5B,EAAAC,EAAAC,cAACqB,EAAD,CAAQpB,QAASQ,KAAKU,iBAAkBjB,UAAU,SAASE,KAAK,mBAhB/DuB,IAAMC,WCMZC,EAPF,kBACT/B,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cACdJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAf,UACAJ,EAAAC,EAAAC,cAAC8B,EAAD,QCOOC,mLARX,OACEjC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACgC,EAAD,cAJUJ,aCQEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAAS1B,SAAS2B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.291269d8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './button.css';\r\n\r\nvar Button = (props)=>(\r\n    <button onClick={props.onClick} className={`${props.className} ret-btn`}>{props.text}</button>\r\n);\r\n\r\nexport default Button;","import React from 'react';\r\nimport ReactModal from 'react-modal';\r\nimport './sign-in.css';\r\nimport Button from './../Button/button.jsx';\r\n\r\nclass SignIn extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            showModal:false\r\n        }\r\n    };\r\n    render(){\r\n        return (\r\n            <div className=\"com-sign\">\r\n                <Button className=\"sign-in\" onClick={this.handleOpenModal} text='Sign In'/>\r\n                <ReactModal isOpen={this.state.showModal}\r\n                            contentLabel=\"Sign IN\"\r\n                            onRequestClose={this.handleCloseModal}\r\n                            className='signin-modal'\r\n                            overlayClassName='signin-overlay'>\r\n                    <Button onClick={this.handleCloseModal} className='modbut' text='Close'/>\r\n                </ReactModal>\r\n            </div>\r\n        );\r\n    }\r\n    getParent = ()=>{\r\n        return document.querySelector('#com-sign');\r\n    }\r\n    handleOpenModal = ()=>{\r\n        this.setState({showModal:true});\r\n    }\r\n    handleCloseModal = ()=>{\r\n        this.setState({showModal:false});\r\n    }\r\n};\r\n\r\nexport default SignIn;","import React from 'react';\r\nimport './header.css';\r\nimport SignIn from '../sign-in/sign-in.jsx';\r\n\r\nvar Header = ()=>(\r\n    <header className=\"App-header\">\r\n        <div className=\"header-text\">daigur</div>\r\n        <SignIn/>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './header/header.jsx'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}